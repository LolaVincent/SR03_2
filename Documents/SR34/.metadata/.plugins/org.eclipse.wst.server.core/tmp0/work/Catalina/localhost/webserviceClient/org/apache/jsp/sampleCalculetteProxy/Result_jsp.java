/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.33
 * Generated at: 2016-06-03 11:49:53 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.sampleCalculetteProxy;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class Result_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
 request.setCharacterEncoding("UTF-8"); 
      out.write("\n");
      out.write("<HTML>\n");
      out.write("<HEAD>\n");
      out.write("<TITLE>Result</TITLE>\n");
      out.write("</HEAD>\n");
      out.write("<BODY>\n");
      out.write("<H1>Result</H1>\n");
      out.write("\n");
      webservice.CalculetteProxy sampleCalculetteProxyid = null;
      synchronized (session) {
        sampleCalculetteProxyid = (webservice.CalculetteProxy) _jspx_page_context.getAttribute("sampleCalculetteProxyid", javax.servlet.jsp.PageContext.SESSION_SCOPE);
        if (sampleCalculetteProxyid == null){
          sampleCalculetteProxyid = new webservice.CalculetteProxy();
          _jspx_page_context.setAttribute("sampleCalculetteProxyid", sampleCalculetteProxyid, javax.servlet.jsp.PageContext.SESSION_SCOPE);
        }
      }
      out.write('\n');

if (request.getParameter("endpoint") != null && request.getParameter("endpoint").length() > 0)
sampleCalculetteProxyid.setEndpoint(request.getParameter("endpoint"));

      out.write('\n');
      out.write('\n');

String method = request.getParameter("method");
int methodID = 0;
if (method == null) methodID = -1;

if(methodID != -1) methodID = Integer.parseInt(method);
boolean gotMethod = false;

try {
switch (methodID){ 
case 2:
        gotMethod = true;
        java.lang.String getEndpoint2mtemp = sampleCalculetteProxyid.getEndpoint();
if(getEndpoint2mtemp == null){

      out.write('\n');
      out.print(getEndpoint2mtemp );
      out.write('\n');

}else{
        String tempResultreturnp3 = org.eclipse.jst.ws.util.JspUtils.markup(String.valueOf(getEndpoint2mtemp));
        
      out.write("\n");
      out.write("        ");
      out.print( tempResultreturnp3 );
      out.write("\n");
      out.write("        ");

}
break;
case 5:
        gotMethod = true;
        String endpoint_0id=  request.getParameter("endpoint8");
            java.lang.String endpoint_0idTemp = null;
        if(!endpoint_0id.equals("")){
         endpoint_0idTemp  = endpoint_0id;
        }
        sampleCalculetteProxyid.setEndpoint(endpoint_0idTemp);
break;
case 10:
        gotMethod = true;
        webservice.Calculette getCalculette10mtemp = sampleCalculetteProxyid.getCalculette();
if(getCalculette10mtemp == null){

      out.write('\n');
      out.print(getCalculette10mtemp );
      out.write('\n');

}else{
        if(getCalculette10mtemp!= null){
        String tempreturnp11 = getCalculette10mtemp.toString();
        
      out.write("\n");
      out.write("        ");
      out.print(tempreturnp11);
      out.write("\n");
      out.write("        ");

        }}
break;
case 13:
        gotMethod = true;
        String val1_1id=  request.getParameter("val116");
        int val1_1idTemp  = Integer.parseInt(val1_1id);
        String val2_2id=  request.getParameter("val218");
        int val2_2idTemp  = Integer.parseInt(val2_2id);
        int mul13mtemp = sampleCalculetteProxyid.mul(val1_1idTemp,val2_2idTemp);
        String tempResultreturnp14 = org.eclipse.jst.ws.util.JspUtils.markup(String.valueOf(mul13mtemp));
        
      out.write("\n");
      out.write("        ");
      out.print( tempResultreturnp14 );
      out.write("\n");
      out.write("        ");

break;
case 20:
        gotMethod = true;
        String val1_3id=  request.getParameter("val123");
        int val1_3idTemp  = Integer.parseInt(val1_3id);
        String val2_4id=  request.getParameter("val225");
        int val2_4idTemp  = Integer.parseInt(val2_4id);
        int sou20mtemp = sampleCalculetteProxyid.sou(val1_3idTemp,val2_4idTemp);
        String tempResultreturnp21 = org.eclipse.jst.ws.util.JspUtils.markup(String.valueOf(sou20mtemp));
        
      out.write("\n");
      out.write("        ");
      out.print( tempResultreturnp21 );
      out.write("\n");
      out.write("        ");

break;
case 27:
        gotMethod = true;
        String val1_5id=  request.getParameter("val130");
        int val1_5idTemp  = Integer.parseInt(val1_5id);
        String val2_6id=  request.getParameter("val232");
        int val2_6idTemp  = Integer.parseInt(val2_6id);
        int add27mtemp = sampleCalculetteProxyid.add(val1_5idTemp,val2_6idTemp);
        String tempResultreturnp28 = org.eclipse.jst.ws.util.JspUtils.markup(String.valueOf(add27mtemp));
        
      out.write("\n");
      out.write("        ");
      out.print( tempResultreturnp28 );
      out.write("\n");
      out.write("        ");

break;
}
} catch (Exception e) { 

      out.write("\n");
      out.write("Exception: ");
      out.print( org.eclipse.jst.ws.util.JspUtils.markup(e.toString()) );
      out.write("\n");
      out.write("Message: ");
      out.print( org.eclipse.jst.ws.util.JspUtils.markup(e.getMessage()) );
      out.write('\n');

return;
}
if(!gotMethod){

      out.write("\n");
      out.write("result: N/A\n");

}

      out.write("\n");
      out.write("</BODY>\n");
      out.write("</HTML>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
